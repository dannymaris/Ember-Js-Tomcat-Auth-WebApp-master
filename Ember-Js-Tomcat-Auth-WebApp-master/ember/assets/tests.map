{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","demo/tests/app.lint-test.js","demo/tests/test-helper.js","demo/tests/tests.lint-test.js","demo/tests/unit/controllers/application-test.js","demo/tests/unit/controllers/book-ticket-test.js","demo/tests/unit/controllers/view-details-test.js","demo/tests/unit/routes/book-ticket-test.js","demo/tests/unit/routes/view-details-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('demo/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/book-ticket.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/book-ticket.js should pass ESLint\\n\\n37:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n45:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n77:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n114:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n136:26 - \\'i\\' is already defined. (no-redeclare)\\n136:31 - \\'k\\' is already defined. (no-redeclare)\\n138:26 - \\'obj\\' is already defined. (no-redeclare)');\n  });\n\n  QUnit.test('controllers/view-details.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/view-details.js should pass ESLint\\n\\n68:14 - \\'res\\' is not defined. (no-undef)\\n69:14 - \\'res\\' is not defined. (no-undef)\\n70:14 - \\'res\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/book-ticket.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/book-ticket.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/view-details.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/view-details.js should pass ESLint\\n\\n');\n  });\n});","define('demo/tests/test-helper', ['demo/app', 'demo/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('demo/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/book-ticket-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/book-ticket-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/view-details-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/view-details-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/book-ticket-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/book-ticket-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/view-details-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/view-details-test.js should pass ESLint\\n\\n');\n  });\n});","define('demo/tests/unit/controllers/application-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:application');\n      assert.ok(controller);\n    });\n  });\n});","define('demo/tests/unit/controllers/book-ticket-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | book-ticket', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:book-ticket');\n      assert.ok(controller);\n    });\n  });\n});","define('demo/tests/unit/controllers/view-details-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | view-details', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:view-details');\n      assert.ok(controller);\n    });\n  });\n});","define('demo/tests/unit/routes/book-ticket-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | book-ticket', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:book-ticket');\n      assert.ok(route);\n    });\n  });\n});","define('demo/tests/unit/routes/view-details-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | view-details', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:view-details');\n      assert.ok(route);\n    });\n  });\n});","define('demo/config/environment', [], function() {\n  var prefix = 'demo';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('demo/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}